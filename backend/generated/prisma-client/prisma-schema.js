module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateFake {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateSnowflakeironmen {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Fake {
  id: ID!
  news: String!
  nummmber: Int!
}

type FakeConnection {
  pageInfo: PageInfo!
  edges: [FakeEdge]!
  aggregate: AggregateFake!
}

input FakeCreateInput {
  id: ID
  news: String!
  nummmber: Int!
}

type FakeEdge {
  node: Fake!
  cursor: String!
}

enum FakeOrderByInput {
  id_ASC
  id_DESC
  news_ASC
  news_DESC
  nummmber_ASC
  nummmber_DESC
}

type FakePreviousValues {
  id: ID!
  news: String!
  nummmber: Int!
}

type FakeSubscriptionPayload {
  mutation: MutationType!
  node: Fake
  updatedFields: [String!]
  previousValues: FakePreviousValues
}

input FakeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FakeWhereInput
  AND: [FakeSubscriptionWhereInput!]
  OR: [FakeSubscriptionWhereInput!]
  NOT: [FakeSubscriptionWhereInput!]
}

input FakeUpdateInput {
  news: String
  nummmber: Int
}

input FakeUpdateManyMutationInput {
  news: String
  nummmber: Int
}

input FakeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  news: String
  news_not: String
  news_in: [String!]
  news_not_in: [String!]
  news_lt: String
  news_lte: String
  news_gt: String
  news_gte: String
  news_contains: String
  news_not_contains: String
  news_starts_with: String
  news_not_starts_with: String
  news_ends_with: String
  news_not_ends_with: String
  nummmber: Int
  nummmber_not: Int
  nummmber_in: [Int!]
  nummmber_not_in: [Int!]
  nummmber_lt: Int
  nummmber_lte: Int
  nummmber_gt: Int
  nummmber_gte: Int
  AND: [FakeWhereInput!]
  OR: [FakeWhereInput!]
  NOT: [FakeWhereInput!]
}

input FakeWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createFake(data: FakeCreateInput!): Fake!
  updateFake(data: FakeUpdateInput!, where: FakeWhereUniqueInput!): Fake
  updateManyFakes(data: FakeUpdateManyMutationInput!, where: FakeWhereInput): BatchPayload!
  upsertFake(where: FakeWhereUniqueInput!, create: FakeCreateInput!, update: FakeUpdateInput!): Fake!
  deleteFake(where: FakeWhereUniqueInput!): Fake
  deleteManyFakes(where: FakeWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createSnowflakeironmen(data: SnowflakeironmenCreateInput!): Snowflakeironmen!
  updateSnowflakeironmen(data: SnowflakeironmenUpdateInput!, where: SnowflakeironmenWhereUniqueInput!): Snowflakeironmen
  updateManySnowflakeironmens(data: SnowflakeironmenUpdateManyMutationInput!, where: SnowflakeironmenWhereInput): BatchPayload!
  upsertSnowflakeironmen(where: SnowflakeironmenWhereUniqueInput!, create: SnowflakeironmenCreateInput!, update: SnowflakeironmenUpdateInput!): Snowflakeironmen!
  deleteSnowflakeironmen(where: SnowflakeironmenWhereUniqueInput!): Snowflakeironmen
  deleteManySnowflakeironmens(where: SnowflakeironmenWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  title: String!
  published: Boolean!
  author: User
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  title: String!
  published: Boolean
  author: UserCreateOneWithoutPostsInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  id: ID
  title: String!
  published: Boolean
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  published_ASC
  published_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  published: Boolean!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  published: Boolean
  published_not: Boolean
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  title: String
  published: Boolean
  author: UserUpdateOneWithoutPostsInput
}

input PostUpdateManyDataInput {
  title: String
  published: Boolean
}

input PostUpdateManyMutationInput {
  title: String
  published: Boolean
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutAuthorDataInput {
  title: String
  published: Boolean
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  published: Boolean
  published_not: Boolean
  author: UserWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  fake(where: FakeWhereUniqueInput!): Fake
  fakes(where: FakeWhereInput, orderBy: FakeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Fake]!
  fakesConnection(where: FakeWhereInput, orderBy: FakeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FakeConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  snowflakeironmen(where: SnowflakeironmenWhereUniqueInput!): Snowflakeironmen
  snowflakeironmens(where: SnowflakeironmenWhereInput, orderBy: SnowflakeironmenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Snowflakeironmen]!
  snowflakeironmensConnection(where: SnowflakeironmenWhereInput, orderBy: SnowflakeironmenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SnowflakeironmenConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Snowflakeironmen {
  id: ID!
  title: String!
  public: Boolean!
  author: User
}

type SnowflakeironmenConnection {
  pageInfo: PageInfo!
  edges: [SnowflakeironmenEdge]!
  aggregate: AggregateSnowflakeironmen!
}

input SnowflakeironmenCreateInput {
  id: ID
  title: String!
  public: Boolean
  author: UserCreateOneInput
}

type SnowflakeironmenEdge {
  node: Snowflakeironmen!
  cursor: String!
}

enum SnowflakeironmenOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  public_ASC
  public_DESC
}

type SnowflakeironmenPreviousValues {
  id: ID!
  title: String!
  public: Boolean!
}

type SnowflakeironmenSubscriptionPayload {
  mutation: MutationType!
  node: Snowflakeironmen
  updatedFields: [String!]
  previousValues: SnowflakeironmenPreviousValues
}

input SnowflakeironmenSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SnowflakeironmenWhereInput
  AND: [SnowflakeironmenSubscriptionWhereInput!]
  OR: [SnowflakeironmenSubscriptionWhereInput!]
  NOT: [SnowflakeironmenSubscriptionWhereInput!]
}

input SnowflakeironmenUpdateInput {
  title: String
  public: Boolean
  author: UserUpdateOneInput
}

input SnowflakeironmenUpdateManyMutationInput {
  title: String
  public: Boolean
}

input SnowflakeironmenWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  public: Boolean
  public_not: Boolean
  author: UserWhereInput
  AND: [SnowflakeironmenWhereInput!]
  OR: [SnowflakeironmenWhereInput!]
  NOT: [SnowflakeironmenWhereInput!]
}

input SnowflakeironmenWhereUniqueInput {
  id: ID
}

type Subscription {
  fake(where: FakeSubscriptionWhereInput): FakeSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  snowflakeironmen(where: SnowflakeironmenSubscriptionWhereInput): SnowflakeironmenSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  name: String!
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  id: ID
  email: String!
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  email: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateInput {
  email: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  email: String
  name: String
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPostsDataInput {
  email: String
  name: String
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    